"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список
только числами. Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список с числами выводится на
экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки. При вводе пользователем
очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class OwnError(Exception):

    def func_str(self, my_list):
        try:
            for el in my_list:
                if type(el) == str:
                    raise OwnError("В списке присутствует элемент типа данных <<str>>: ")

        except OwnError as err:
            print(err, el)

    def func_bool(self, my_list):
        try:
            for el in my_list:
                if type(el) == bool:
                    raise OwnError("В списке присутствует элемент типа данных <<bool>>: ")
        except OwnError as err:
            print(err, el)


input_list = [23, 2.7, 'Привет', bool(5)]
print("Введенный список: ", input_list, "\n")
my_err = OwnError()
my_err.func_str(input_list)
my_err.func_bool(input_list)
